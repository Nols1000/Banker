if SI == nil then SI = {} end

-------- --------------------------------------------------------------------
-- Each SI you create you need to register with it with ESO like below
-----------------------------------------------------------------------------
SI.BANKER_NAME = "SI_BANKER_NAME"
SI.HEADER_SETTINGS = "SI_HEADER_SETTINGS"
SI.HEADER_ITEM_TYPES = "SI_HEADER_ITEM_TYPES"
SI.WARNING_ITEM_TYPES = "SI_WARNING_ITEM_TYPES"
SI.DESC_MAIN = "SI_DESC_MAIN"
SI.DESC_MAIN_TITLE = "SI_DESC_MAIN_TITLE"
SI.HEADER_DEVELOPER="SI_HEADER_DEVELOPER"
SI.TITLE_DEBUG="SI_TITLE_DEBUG"
SI.WARNING_DEVELOPER="SI_WARNING_DEVELOPER"
SI.ITEMTYPE_TITLE="SI_ITEMTYPE_TITLE"
SI.ITEMTYPE_DESC="SI_ITEMTYPE_DESC"
SI.COMMON_TITLE="SI_COMMON_TITLE"
SI.COMMON_DESC="SI_COMMON_DESC"
SI.MIN_TITLE="SI_TITLE_MIN"
SI.STEP_TITLE="SI_TITLE_STEP"
SI.EITEMS_TITLE="SI_TITLE_EITEMS"
SI.EMONEY_TITLE="SI_TITLE_EMONEY"
SI.MSG_TITLE="SI_TITLE_MSG"
SI.DEBUG_TITLE="SI_TITLE_DEBUG"
SI.KB_TITLE="SI_KB_TITLE"
SI.KB_SYNC_ITEMS="SI_KB_SYNC_ITEMS"
SI.KB_SAFE_MONEY="SI_KB_SAFE_MONEY"
SI.BINDING_NAME_SYNC_INVENTORY="SI_BINDING_NAME_SYNC_INVENTORY"
SI.BINDING_NAME_AUTO_DEPOSIT_MONEY="SI_BINDING_NAME_AUTO_DEPOSIT_MONEY"

-- utility functions
SI.get = function(key, n)
    assert(key ~= nil)
    return assert(GetString(_G[key], n))
end

---- Your global sampleApp var from SampleApp.lua. We're setting it to SI here. 
Banker.SI = SI